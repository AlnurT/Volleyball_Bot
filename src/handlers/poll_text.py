from datetime import datetime
from typing import Sequence, Generator

from aiogram.utils.formatting import as_list


class TextPoll:
    @staticmethod
    def _get_players_gen(players: Sequence) -> Generator:
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Ö –∞–∫–∫–∞—É–Ω—Ç"""

        for index, pl in enumerate(players, 1):
            text = f"<a href='tg://user?id={pl.user_id}'>{pl.name}</a>"
            if pl.status == "player":
                yield f"<code>  {index:>2}. </code> {text}"
            else:
                yield f"<code>  {index:>2}. </code> –ò–≥—Ä–æ–∫ –æ—Ç {text}"

    @staticmethod
    def _pure_poll() -> str:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""

        return as_list(
            "üèê <b>–ò–≥—Ä–∞ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫</b> üèê\n",
            "üë´ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç ...",
        ).render()[0]

    @classmethod
    def _poll(cls, pl: Sequence) -> str:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""

        players_text = cls._get_players_gen(pl)
        info = f"\nüòä   –ë—É–¥–µ—Ç –∏–≥—Ä–∞ {(len(pl) + 1) // 2} –Ω–∞ {len(pl) // 2}" \
            if len(pl) >= 8 else "\nüòì   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤"

        return as_list(
            "üèê <b>–ò–≥—Ä–∞ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫</b>\n",
            "üë´ –£—á–∞—Å—Ç–Ω–∏–∫–∏:",
            as_list(*players_text),
            info,
        ).render()[0]

    @classmethod
    def _poll_with_reserve(cls, pl: Sequence) -> str:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —Ä–µ–∑–µ—Ä–≤–æ–º"""

        players_gen = cls._get_players_gen(pl[:14])
        reserve_gen = cls._get_players_gen(pl[14:])

        return as_list(
            "üèê <b>–ò–≥—Ä–∞ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫</b>\n",
            "üë´ –£—á–∞—Å—Ç–Ω–∏–∫–∏:",
            as_list(*players_gen),
            "\n‚è≥ –†–µ–∑–µ—Ä–≤:",
            as_list(*reserve_gen),
            f"\nüòä   –ë—É–¥–µ—Ç –∏–≥—Ä–∞ 7 –Ω–∞ 7",
        ).render()[0]

    @classmethod
    def _end_poll(cls, pl: Sequence) -> str:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ü–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""

        players_gen = cls._get_players_gen(pl)
        day = datetime.now().strftime("%d.%m")

        return as_list(
            "üèÅ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n",
            f"–í—Ç–æ—Ä–Ω–∏–∫ - {day}\n",
            "üë´ –£—á–∞—Å—Ç–Ω–∏–∫–∏:",
            as_list(*players_gen),
            "\nüèÜ   –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!",
        ).render()[0]

    @classmethod
    def send_poll(cls, pl: Sequence, is_end: bool = False) -> str:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π"""
        if not pl:
            return cls._pure_poll()

        if is_end:
            return cls._end_poll(pl[:14])

        if len(pl) <= 14:
            return cls._poll(pl)

        return cls._poll_with_reserve(pl)


